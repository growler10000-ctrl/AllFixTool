name: Build Portable FixAllTool (Windows-only, full auto-detect)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Locate all project parts
        id: locate
        run: |
          $ErrorActionPreference = 'Stop'

          # Find main project
          $proj = Get-ChildItem -Recurse -Filter FixAllTool.csproj | Select-Object -First 1
          if (-not $proj) { throw "FixAllTool.csproj not found." }
          $projectDir = $proj.Directory.FullName
          "PROJECT_DIR=$projectDir" | Out-File -FilePath $env:GITHUB_ENV -Append

          # Find AI service
          $ai = Get-ChildItem -Recurse -Filter app.py | Where-Object { $_.FullName -match "ai_service" } | Select-Object -First 1
          if (-not $ai) { throw "ai_service/app.py not found." }
          $aiRoot = $ai.Directory.FullName
          "AI_DIR=$aiRoot" | Out-File -FilePath $env:GITHUB_ENV -Append

          # Find Assets (optional)
          $assets = Get-ChildItem -Recurse -Directory -Filter Assets | Select-Object -First 1
          if ($assets) { "ASSETS_DIR=$($assets.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append }

          # Find Guides (optional)
          $guides = Get-ChildItem -Recurse -Directory -Filter Guides | Select-Object -First 1
          if ($guides) { "GUIDES_DIR=$($guides.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append }

          Write-Host "Found project: $projectDir"
          Write-Host "Found AI: $aiRoot"
          if ($assets) { Write-Host "Found Assets: $($assets.FullName)" }
          if ($guides) { Write-Host "Found Guides: $($guides.FullName)" }

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build ai_service.exe
        run: |
          $ErrorActionPreference = 'Stop'
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r "$env:AI_DIR\requirements.txt"
          pip install --no-cache-dir pyinstaller==6.6.0
          pyinstaller --onefile --name ai_service "$env:AI_DIR\app.py"
          if (-not (Test-Path .\dist\ai_service.exe)) { throw "ai_service.exe was not produced." }

      - name: Restore & Build WPF
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet restore "$env:PROJECT_DIR\FixAllTool.csproj"
          dotnet build   "$env:PROJECT_DIR\FixAllTool.csproj" -c Release

      - name: Publish single-file EXE
        run: |
          $ErrorActionPreference = 'Stop'
          dotnet publish "$env:PROJECT_DIR\FixAllTool.csproj" `
            -c Release -r win-x64 --self-contained true `
            /p:PublishSingleFile=true /p:IncludeAllContentForSelfExtract=true `
            /p:DebugType=none /p:Optimize=true /p:ReadyToRun=true `
            /p:TieredCompilation=true /p:TieredPGO=true `
            -o .\publish\fixall_x64
          if (-not (Test-Path .\publish\fixall_x64\FixAllTool.exe)) { throw "FixAllTool.exe not found after publish." }

      - name: Assemble dist
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Path .\dist -Force | Out-Null
          Copy-Item .\dist\ai_service.exe .\dist\ -Force
          Copy-Item .\publish\fixall_x64\FixAllTool.exe .\dist\ -Force
          if ($env:ASSETS_DIR) { Copy-Item "$env:ASSETS_DIR" .\dist\ -Recurse -Force }
          if ($env:GUIDES_DIR) { Copy-Item "$env:GUIDES_DIR" .\dist\ -Recurse -Force }

      - name: Smoke test AI
        run: |
          $ErrorActionPreference = 'Stop'
          Start-Process -FilePath .\dist\ai_service.exe -PassThru | Out-Null
          Start-Sleep -Seconds 1
          $resp = Invoke-WebRequest -Uri http://127.0.0.1:5000/health -UseBasicParsing -TimeoutSec 3
          if ($resp.StatusCode -ne 200) { throw "AI health bad status: $($resp.StatusCode)" }
          Get-Process ai_service -ErrorAction SilentlyContinue | ForEach-Object { $_.Kill() }

      - name: Package portable ZIP
        run: |
          Compress-Archive -Path .\dist\* -DestinationPath .\FixAllTool_Portable.zip -Force
          if (-not (Test-Path .\FixAllTool_Portable.zip)) { throw "Packaging failed; ZIP missing." }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: FixAllTool_Portable
          path: FixAllTool_Portable.zip

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: FixAllTool_Portable
          path: .
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: FixAllTool_Portable.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
